{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","bin2dec","binary","split","reverse","reduce","prev","value","index","dec2bin","decimal","Math","floor","changeBinary","e","target","test","setState","alert","changeDecimal","state","this","className","type","onChange","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ca91d2c7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      binary: '',\n      decimal: ''\n    };\n  }\n\n  bin2dec = binary => {\n    return binary.split('').reverse().reduce(\n      (prev, value, index) => prev + value * (2 ** index)\n      , 0)\n  };\n\n  dec2bin = decimal => {\n    let binary = '';\n    while (decimal) {\n      binary = (decimal%2 ? '1' : '0') + binary;\n      decimal = Math.floor(decimal/2);\n    }\n    return binary;\n  }\n\n  changeBinary = (e) => {\n    const binary = e.target.value;\n    const isValidInput = /^[01]*$/.test(binary);\n    if (isValidInput)\n      this.setState({\n        binary,\n        decimal: this.bin2dec(binary)\n      });\n    else\n      alert('Only valid 1 or 0');\n  };\n\n  changeDecimal = (e) => {\n    const decimal = e.target.value;\n    const isValidInput = /^[\\d]*$/.test(decimal);\n    if (isValidInput) {\n      this.setState({\n        decimal,\n        binary: this.dec2bin(decimal)\n      });\n    }\n    else {\n      alert('Only valid numbers');\n    }\n  };\n\n  render() {\n    const { binary, decimal } = this.state;\n    return (\n      <div className='App'>\n        <div className='bin'>\n          <div className='bin-form'>\n            <input type='text' className='binary-text' value={binary} onChange={this.changeBinary} />\n            <div className='binary-line' />\n          </div>\n        </div>\n        <div className='dec'>\n          <div className='dec-form'>\n            <input type='text' className='decimal-text' value={decimal} onChange={this.changeDecimal} />\n            <div className='decimal-line' />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}